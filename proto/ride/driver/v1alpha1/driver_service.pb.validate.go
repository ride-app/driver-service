// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ride/driver/v1alpha1/driver_service.proto

package driverv1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Driver with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Driver) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Driver with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DriverMultiError, or nil if none found.
func (m *Driver) ValidateAll() error {
	return m.validate(true)
}

func (m *Driver) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Driver_Name_Pattern.MatchString(m.GetName()) {
		err := DriverValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DisplayName

	if uri, err := url.Parse(m.GetPhotoUri()); err != nil {
		err = DriverValidationError{
			field:  "PhotoUri",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := DriverValidationError{
			field:  "PhotoUri",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Driver_PhoneNumber_Pattern.MatchString(m.GetPhoneNumber()) {
		err := DriverValidationError{
			field:  "PhoneNumber",
			reason: "value does not match regex pattern \"^\\\\+?[1-9]\\\\d{1,14}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDateOfBirth() == nil {
		err := DriverValidationError{
			field:  "DateOfBirth",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDateOfBirth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DriverValidationError{
					field:  "DateOfBirth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DriverValidationError{
					field:  "DateOfBirth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateOfBirth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DriverValidationError{
				field:  "DateOfBirth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Driver_Gender_NotInLookup[m.GetGender()]; ok {
		err := DriverValidationError{
			field:  "Gender",
			reason: "value must not be in list [GENDER_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DriverValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DriverValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DriverValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DriverValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DriverValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DriverValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DriverMultiError(errors)
	}

	return nil
}

// DriverMultiError is an error wrapping multiple validation errors returned by
// Driver.ValidateAll() if the designated constraints aren't met.
type DriverMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DriverMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DriverMultiError) AllErrors() []error { return m }

// DriverValidationError is the validation error returned by Driver.Validate if
// the designated constraints aren't met.
type DriverValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DriverValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DriverValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DriverValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DriverValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DriverValidationError) ErrorName() string { return "DriverValidationError" }

// Error satisfies the builtin error interface
func (e DriverValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDriver.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DriverValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DriverValidationError{}

var _Driver_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+$")

var _Driver_PhoneNumber_Pattern = regexp.MustCompile("^\\+?[1-9]\\d{1,14}$")

var _Driver_Gender_NotInLookup = map[Driver_Gender]struct{}{
	0: {},
}

// Validate checks the field values on GetDriverRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDriverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDriverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDriverRequestMultiError, or nil if none found.
func (m *GetDriverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDriverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetDriverRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetDriverRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDriverRequestMultiError(errors)
	}

	return nil
}

// GetDriverRequestMultiError is an error wrapping multiple validation errors
// returned by GetDriverRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDriverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDriverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDriverRequestMultiError) AllErrors() []error { return m }

// GetDriverRequestValidationError is the validation error returned by
// GetDriverRequest.Validate if the designated constraints aren't met.
type GetDriverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDriverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDriverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDriverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDriverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDriverRequestValidationError) ErrorName() string { return "GetDriverRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDriverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDriverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDriverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDriverRequestValidationError{}

var _GetDriverRequest_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+$")

// Validate checks the field values on GetDriverResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDriverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDriverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDriverResponseMultiError, or nil if none found.
func (m *GetDriverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDriverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDriver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDriverResponseValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDriverResponseValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDriver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDriverResponseValidationError{
				field:  "Driver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDriverResponseMultiError(errors)
	}

	return nil
}

// GetDriverResponseMultiError is an error wrapping multiple validation errors
// returned by GetDriverResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDriverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDriverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDriverResponseMultiError) AllErrors() []error { return m }

// GetDriverResponseValidationError is the validation error returned by
// GetDriverResponse.Validate if the designated constraints aren't met.
type GetDriverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDriverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDriverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDriverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDriverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDriverResponseValidationError) ErrorName() string {
	return "GetDriverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDriverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDriverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDriverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDriverResponseValidationError{}

// Validate checks the field values on CreateDriverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDriverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDriverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDriverRequestMultiError, or nil if none found.
func (m *CreateDriverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDriverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if m.GetDriver() == nil {
		err := CreateDriverRequestValidationError{
			field:  "Driver",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDriver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDriverRequestValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDriverRequestValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDriver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDriverRequestValidationError{
				field:  "Driver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDriverRequestMultiError(errors)
	}

	return nil
}

// CreateDriverRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDriverRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDriverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDriverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDriverRequestMultiError) AllErrors() []error { return m }

// CreateDriverRequestValidationError is the validation error returned by
// CreateDriverRequest.Validate if the designated constraints aren't met.
type CreateDriverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDriverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDriverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDriverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDriverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDriverRequestValidationError) ErrorName() string {
	return "CreateDriverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDriverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDriverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDriverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDriverRequestValidationError{}

// Validate checks the field values on CreateDriverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDriverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDriverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDriverResponseMultiError, or nil if none found.
func (m *CreateDriverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDriverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDriver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDriverResponseValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDriverResponseValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDriver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDriverResponseValidationError{
				field:  "Driver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDriverResponseMultiError(errors)
	}

	return nil
}

// CreateDriverResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDriverResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDriverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDriverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDriverResponseMultiError) AllErrors() []error { return m }

// CreateDriverResponseValidationError is the validation error returned by
// CreateDriverResponse.Validate if the designated constraints aren't met.
type CreateDriverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDriverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDriverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDriverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDriverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDriverResponseValidationError) ErrorName() string {
	return "CreateDriverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDriverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDriverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDriverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDriverResponseValidationError{}

// Validate checks the field values on UpdateDriverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDriverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDriverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDriverRequestMultiError, or nil if none found.
func (m *UpdateDriverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDriverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDriver() == nil {
		err := UpdateDriverRequestValidationError{
			field:  "Driver",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDriver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDriverRequestValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDriverRequestValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDriver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDriverRequestValidationError{
				field:  "Driver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDriverRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDriverRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDriverRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDriverRequestMultiError(errors)
	}

	return nil
}

// UpdateDriverRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDriverRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDriverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDriverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDriverRequestMultiError) AllErrors() []error { return m }

// UpdateDriverRequestValidationError is the validation error returned by
// UpdateDriverRequest.Validate if the designated constraints aren't met.
type UpdateDriverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDriverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDriverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDriverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDriverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDriverRequestValidationError) ErrorName() string {
	return "UpdateDriverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDriverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDriverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDriverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDriverRequestValidationError{}

// Validate checks the field values on UpdateDriverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDriverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDriverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDriverResponseMultiError, or nil if none found.
func (m *UpdateDriverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDriverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDriver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDriverResponseValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDriverResponseValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDriver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDriverResponseValidationError{
				field:  "Driver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDriverResponseMultiError(errors)
	}

	return nil
}

// UpdateDriverResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDriverResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDriverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDriverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDriverResponseMultiError) AllErrors() []error { return m }

// UpdateDriverResponseValidationError is the validation error returned by
// UpdateDriverResponse.Validate if the designated constraints aren't met.
type UpdateDriverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDriverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDriverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDriverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDriverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDriverResponseValidationError) ErrorName() string {
	return "UpdateDriverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDriverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDriverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDriverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDriverResponseValidationError{}

// Validate checks the field values on DeleteDriverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDriverRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDriverRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDriverRequestMultiError, or nil if none found.
func (m *DeleteDriverRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDriverRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_DeleteDriverRequest_Name_Pattern.MatchString(m.GetName()) {
		err := DeleteDriverRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDriverRequestMultiError(errors)
	}

	return nil
}

// DeleteDriverRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDriverRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDriverRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDriverRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDriverRequestMultiError) AllErrors() []error { return m }

// DeleteDriverRequestValidationError is the validation error returned by
// DeleteDriverRequest.Validate if the designated constraints aren't met.
type DeleteDriverRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDriverRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDriverRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDriverRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDriverRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDriverRequestValidationError) ErrorName() string {
	return "DeleteDriverRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDriverRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDriverRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDriverRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDriverRequestValidationError{}

var _DeleteDriverRequest_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+$")

// Validate checks the field values on DeleteDriverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDriverResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDriverResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDriverResponseMultiError, or nil if none found.
func (m *DeleteDriverResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDriverResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDriverResponseMultiError(errors)
	}

	return nil
}

// DeleteDriverResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDriverResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDriverResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDriverResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDriverResponseMultiError) AllErrors() []error { return m }

// DeleteDriverResponseValidationError is the validation error returned by
// DeleteDriverResponse.Validate if the designated constraints aren't met.
type DeleteDriverResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDriverResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDriverResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDriverResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDriverResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDriverResponseValidationError) ErrorName() string {
	return "DeleteDriverResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDriverResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDriverResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDriverResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDriverResponseValidationError{}

// Validate checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Status) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Status with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatusMultiError, or nil if none found.
func (m *Status) ValidateAll() error {
	return m.validate(true)
}

func (m *Status) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Status_Name_Pattern.MatchString(m.GetName()) {
		err := StatusValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+/status$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Online

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatusValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatusValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatusMultiError(errors)
	}

	return nil
}

// StatusMultiError is an error wrapping multiple validation errors returned by
// Status.ValidateAll() if the designated constraints aren't met.
type StatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusMultiError) AllErrors() []error { return m }

// StatusValidationError is the validation error returned by Status.Validate if
// the designated constraints aren't met.
type StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusValidationError) ErrorName() string { return "StatusValidationError" }

// Error satisfies the builtin error interface
func (e StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusValidationError{}

var _Status_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+/status$")

// Validate checks the field values on GoOnlineRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoOnlineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoOnlineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoOnlineRequestMultiError, or nil if none found.
func (m *GoOnlineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GoOnlineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GoOnlineRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GoOnlineRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLocation() == nil {
		err := GoOnlineRequestValidationError{
			field:  "Location",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GoOnlineRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GoOnlineRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GoOnlineRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GoOnlineRequestMultiError(errors)
	}

	return nil
}

// GoOnlineRequestMultiError is an error wrapping multiple validation errors
// returned by GoOnlineRequest.ValidateAll() if the designated constraints
// aren't met.
type GoOnlineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoOnlineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoOnlineRequestMultiError) AllErrors() []error { return m }

// GoOnlineRequestValidationError is the validation error returned by
// GoOnlineRequest.Validate if the designated constraints aren't met.
type GoOnlineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoOnlineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoOnlineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoOnlineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoOnlineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoOnlineRequestValidationError) ErrorName() string { return "GoOnlineRequestValidationError" }

// Error satisfies the builtin error interface
func (e GoOnlineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoOnlineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoOnlineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoOnlineRequestValidationError{}

var _GoOnlineRequest_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+$")

// Validate checks the field values on GoOnlineResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoOnlineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoOnlineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoOnlineResponseMultiError, or nil if none found.
func (m *GoOnlineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoOnlineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GoOnlineResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GoOnlineResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GoOnlineResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GoOnlineResponseMultiError(errors)
	}

	return nil
}

// GoOnlineResponseMultiError is an error wrapping multiple validation errors
// returned by GoOnlineResponse.ValidateAll() if the designated constraints
// aren't met.
type GoOnlineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoOnlineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoOnlineResponseMultiError) AllErrors() []error { return m }

// GoOnlineResponseValidationError is the validation error returned by
// GoOnlineResponse.Validate if the designated constraints aren't met.
type GoOnlineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoOnlineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoOnlineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoOnlineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoOnlineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoOnlineResponseValidationError) ErrorName() string { return "GoOnlineResponseValidationError" }

// Error satisfies the builtin error interface
func (e GoOnlineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoOnlineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoOnlineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoOnlineResponseValidationError{}

// Validate checks the field values on GoOfflineRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoOfflineRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoOfflineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoOfflineRequestMultiError, or nil if none found.
func (m *GoOfflineRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GoOfflineRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GoOfflineRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GoOfflineRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GoOfflineRequestMultiError(errors)
	}

	return nil
}

// GoOfflineRequestMultiError is an error wrapping multiple validation errors
// returned by GoOfflineRequest.ValidateAll() if the designated constraints
// aren't met.
type GoOfflineRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoOfflineRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoOfflineRequestMultiError) AllErrors() []error { return m }

// GoOfflineRequestValidationError is the validation error returned by
// GoOfflineRequest.Validate if the designated constraints aren't met.
type GoOfflineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoOfflineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoOfflineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoOfflineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoOfflineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoOfflineRequestValidationError) ErrorName() string { return "GoOfflineRequestValidationError" }

// Error satisfies the builtin error interface
func (e GoOfflineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoOfflineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoOfflineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoOfflineRequestValidationError{}

var _GoOfflineRequest_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+$")

// Validate checks the field values on GoOfflineResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoOfflineResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoOfflineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoOfflineResponseMultiError, or nil if none found.
func (m *GoOfflineResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoOfflineResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GoOfflineResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GoOfflineResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GoOfflineResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GoOfflineResponseMultiError(errors)
	}

	return nil
}

// GoOfflineResponseMultiError is an error wrapping multiple validation errors
// returned by GoOfflineResponse.ValidateAll() if the designated constraints
// aren't met.
type GoOfflineResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoOfflineResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoOfflineResponseMultiError) AllErrors() []error { return m }

// GoOfflineResponseValidationError is the validation error returned by
// GoOfflineResponse.Validate if the designated constraints aren't met.
type GoOfflineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoOfflineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoOfflineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoOfflineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoOfflineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoOfflineResponseValidationError) ErrorName() string {
	return "GoOfflineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GoOfflineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoOfflineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoOfflineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoOfflineResponseValidationError{}

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusRequestMultiError, or nil if none found.
func (m *GetStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetStatusRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetStatusRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+/status$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStatusRequestMultiError(errors)
	}

	return nil
}

// GetStatusRequestMultiError is an error wrapping multiple validation errors
// returned by GetStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusRequestMultiError) AllErrors() []error { return m }

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

var _GetStatusRequest_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+/status$")

// Validate checks the field values on GetStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusResponseMultiError, or nil if none found.
func (m *GetStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStatusResponseMultiError(errors)
	}

	return nil
}

// GetStatusResponseMultiError is an error wrapping multiple validation errors
// returned by GetStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusResponseMultiError) AllErrors() []error { return m }

// GetStatusResponseValidationError is the validation error returned by
// GetStatusResponse.Validate if the designated constraints aren't met.
type GetStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusResponseValidationError) ErrorName() string {
	return "GetStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusResponseValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Location_Name_Pattern.MatchString(m.GetName()) {
		err := LocationValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+/location$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Latitude

	// no validation rules for Longitude

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}

var _Location_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+/location$")

// Validate checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationRequestMultiError, or nil if none found.
func (m *GetLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetLocationRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetLocationRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+/location$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLocationRequestMultiError(errors)
	}

	return nil
}

// GetLocationRequestMultiError is an error wrapping multiple validation errors
// returned by GetLocationRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationRequestMultiError) AllErrors() []error { return m }

// GetLocationRequestValidationError is the validation error returned by
// GetLocationRequest.Validate if the designated constraints aren't met.
type GetLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationRequestValidationError) ErrorName() string {
	return "GetLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationRequestValidationError{}

var _GetLocationRequest_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+/location$")

// Validate checks the field values on GetLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationResponseMultiError, or nil if none found.
func (m *GetLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLocationResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLocationResponseValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLocationResponseValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLocationResponseMultiError(errors)
	}

	return nil
}

// GetLocationResponseMultiError is an error wrapping multiple validation
// errors returned by GetLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationResponseMultiError) AllErrors() []error { return m }

// GetLocationResponseValidationError is the validation error returned by
// GetLocationResponse.Validate if the designated constraints aren't met.
type GetLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationResponseValidationError) ErrorName() string {
	return "GetLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationResponseValidationError{}

// Validate checks the field values on UpdateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocationRequestMultiError, or nil if none found.
func (m *UpdateLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UpdateLocationRequest_Parent_Pattern.MatchString(m.GetParent()) {
		err := UpdateLocationRequestValidationError{
			field:  "Parent",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLocationRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLocationRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLocationRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLocationRequestMultiError(errors)
	}

	return nil
}

// UpdateLocationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocationRequestMultiError) AllErrors() []error { return m }

// UpdateLocationRequestValidationError is the validation error returned by
// UpdateLocationRequest.Validate if the designated constraints aren't met.
type UpdateLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocationRequestValidationError) ErrorName() string {
	return "UpdateLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocationRequestValidationError{}

var _UpdateLocationRequest_Parent_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+$")

// Validate checks the field values on UpdateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocationResponseMultiError, or nil if none found.
func (m *UpdateLocationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateLocationResponseMultiError(errors)
	}

	return nil
}

// UpdateLocationResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateLocationResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateLocationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocationResponseMultiError) AllErrors() []error { return m }

// UpdateLocationResponseValidationError is the validation error returned by
// UpdateLocationResponse.Validate if the designated constraints aren't met.
type UpdateLocationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocationResponseValidationError) ErrorName() string {
	return "UpdateLocationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocationResponseValidationError{}

// Validate checks the field values on Vehicle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Vehicle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vehicle with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VehicleMultiError, or nil if none found.
func (m *Vehicle) ValidateAll() error {
	return m.validate(true)
}

func (m *Vehicle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_Vehicle_Name_Pattern.MatchString(m.GetName()) {
		err := VehicleValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+/vehicle$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Vehicle_Type_NotInLookup[m.GetType()]; ok {
		err := VehicleValidationError{
			field:  "Type",
			reason: "value must not be in list [TYPE_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DisplayName

	// no validation rules for LicensePlate

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VehicleValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VehicleValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VehicleValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VehicleMultiError(errors)
	}

	return nil
}

// VehicleMultiError is an error wrapping multiple validation errors returned
// by Vehicle.ValidateAll() if the designated constraints aren't met.
type VehicleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VehicleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VehicleMultiError) AllErrors() []error { return m }

// VehicleValidationError is the validation error returned by Vehicle.Validate
// if the designated constraints aren't met.
type VehicleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VehicleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VehicleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VehicleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VehicleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VehicleValidationError) ErrorName() string { return "VehicleValidationError" }

// Error satisfies the builtin error interface
func (e VehicleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVehicle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VehicleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VehicleValidationError{}

var _Vehicle_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+/vehicle$")

var _Vehicle_Type_NotInLookup = map[Vehicle_Type]struct{}{
	0: {},
}

// Validate checks the field values on GetVehicleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVehicleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVehicleRequestMultiError, or nil if none found.
func (m *GetVehicleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVehicleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetVehicleRequest_Name_Pattern.MatchString(m.GetName()) {
		err := GetVehicleRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^drivers/[A-Za-z0-9_-]+/vehicle$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetVehicleRequestMultiError(errors)
	}

	return nil
}

// GetVehicleRequestMultiError is an error wrapping multiple validation errors
// returned by GetVehicleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVehicleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVehicleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVehicleRequestMultiError) AllErrors() []error { return m }

// GetVehicleRequestValidationError is the validation error returned by
// GetVehicleRequest.Validate if the designated constraints aren't met.
type GetVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVehicleRequestValidationError) ErrorName() string {
	return "GetVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVehicleRequestValidationError{}

var _GetVehicleRequest_Name_Pattern = regexp.MustCompile("^drivers/[A-Za-z0-9_-]+/vehicle$")

// Validate checks the field values on GetVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVehicleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVehicleResponseMultiError, or nil if none found.
func (m *GetVehicleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVehicleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVehicle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "Vehicle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVehicleResponseValidationError{
					field:  "Vehicle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVehicle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVehicleResponseValidationError{
				field:  "Vehicle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVehicleResponseMultiError(errors)
	}

	return nil
}

// GetVehicleResponseMultiError is an error wrapping multiple validation errors
// returned by GetVehicleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVehicleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVehicleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVehicleResponseMultiError) AllErrors() []error { return m }

// GetVehicleResponseValidationError is the validation error returned by
// GetVehicleResponse.Validate if the designated constraints aren't met.
type GetVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVehicleResponseValidationError) ErrorName() string {
	return "GetVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVehicleResponseValidationError{}

// Validate checks the field values on UpdateVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVehicleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVehicleRequestMultiError, or nil if none found.
func (m *UpdateVehicleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVehicleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVehicle() == nil {
		err := UpdateVehicleRequestValidationError{
			field:  "Vehicle",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetVehicle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "Vehicle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "Vehicle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVehicle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVehicleRequestValidationError{
				field:  "Vehicle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVehicleRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVehicleRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVehicleRequestMultiError(errors)
	}

	return nil
}

// UpdateVehicleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateVehicleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateVehicleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVehicleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVehicleRequestMultiError) AllErrors() []error { return m }

// UpdateVehicleRequestValidationError is the validation error returned by
// UpdateVehicleRequest.Validate if the designated constraints aren't met.
type UpdateVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVehicleRequestValidationError) ErrorName() string {
	return "UpdateVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVehicleRequestValidationError{}

// Validate checks the field values on UpdateVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVehicleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVehicleResponseMultiError, or nil if none found.
func (m *UpdateVehicleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVehicleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVehicle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVehicleResponseValidationError{
					field:  "Vehicle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVehicleResponseValidationError{
					field:  "Vehicle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVehicle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVehicleResponseValidationError{
				field:  "Vehicle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVehicleResponseMultiError(errors)
	}

	return nil
}

// UpdateVehicleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateVehicleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateVehicleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVehicleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVehicleResponseMultiError) AllErrors() []error { return m }

// UpdateVehicleResponseValidationError is the validation error returned by
// UpdateVehicleResponse.Validate if the designated constraints aren't met.
type UpdateVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVehicleResponseValidationError) ErrorName() string {
	return "UpdateVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVehicleResponseValidationError{}
