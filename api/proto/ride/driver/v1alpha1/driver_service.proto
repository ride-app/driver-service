syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

package ride.driver.v1alpha1;

service DriverService {
  rpc CreateDriver(CreateDriverRequest) returns (CreateDriverResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/drivers"
      body: "*"
    };
  }

  rpc GetDriver(GetDriverRequest) returns (GetDriverResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=drivers/*}"
    };
  }

  rpc UpdateDriver(UpdateDriverRequest) returns (UpdateDriverResponse) {
    option (google.api.http) = {
      patch: "/v1alpha1/{driver.name=drivers/*}"
      body: "*"
    };
  }

  rpc DeleteDriver(DeleteDriverRequest) returns (DeleteDriverResponse) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=drivers/*}"
    };
  }

  // TODO: Check if it's possible to have a single method for both online and offline

  rpc GoOnline (GoOnlineRequest) returns (GoOnlineResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=drivers/*}:goOnline"
      body: "*"
    };
  }

  rpc GoOffline (GoOfflineRequest) returns (GoOfflineResponse) {
    option (google.api.http) = {
      post: "/v1alpha1/{name=drivers/*}:goOffline"
      body: "*"
    };
  }

  rpc GetStatus (GetStatusRequest) returns (GetStatusResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=drivers/*}/status"
    };
  }

  rpc GetLocation(GetLocationRequest) returns (GetLocationResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=drivers/*/location}"
    };
  }

  rpc UpdateLocation(UpdateLocationRequest) returns (UpdateLocationResponse) {
    option (google.api.http) = {
      patch: "/v1alpha1/{location.name=drivers/*/location}"
      body: "*"
    };
  }

  rpc GetVehicle(GetVehicleRequest) returns (GetVehicleResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=drivers/*/vehicle}"
    };
  }

  rpc UpdateVehicle(UpdateVehicleRequest) returns (UpdateVehicleResponse) {
    option (google.api.http) = {
      patch: "/v1alpha1/{vehicle.name=drivers/*/vehicle)"
      body: "*"
    };
  }
}

message Driver {
  // Relative resource name of Driver, for example: "drivers/driver1"
  string name = 1 [(validate.rules).string = {
                    pattern: "^drivers/[A-Za-z0-9_-]+$",
                    ignore_empty: true
                  }];
  
  // The full name of the driver. Example "John Doe"
  string display_name = 2;

  // The uri of the Driver's picture
  string photo_uri = 3 [(validate.rules).string.uri = true];

  // The phone number of the driver. Example "+911234567890"
  string phone_number = 4;
  
  // Output only. Timestamp when the Driver was created.
  google.protobuf.Timestamp create_time = 9;

  // Output only. Timestamp when the Driver was last updated.
  google.protobuf.Timestamp update_time = 10;
}

message GetDriverRequest {
  // Relative resource name of Driver, for example: "drivers/driver1"
  string name = 1;
}

message GetDriverResponse {
  // The requested Driver
  Driver driver = 1;
}

message CreateDriverRequest {
  // A unique request ID for server to detect duplicated requests for idempotency.
	string request_id = 1;

  // The Driver resource to create. Client **must** set the name field.
  Driver driver = 2 [(validate.rules).message.required = true];
}

message CreateDriverResponse {
  // The created Driver.
  Driver driver = 1;
}

message UpdateDriverRequest {
  // The Driver resource which replaces the resource on the server.
  Driver driver = 1 [(validate.rules).message.required = true];

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateDriverResponse {
  // The updated Driver resource.
  Driver driver = 1;
}

message DeleteDriverRequest {
  // The resource name of the Driver to be deleted.
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+$"];
}

message DeleteDriverResponse {
}

message Status {
  // The relative resource name of the Status. Example: "drivers/driver1/status"
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+/status$"];

  // The online status of the Driver.
  bool online = 2;

  // Output only. Timestamp when the status was last updated.
  google.protobuf.Timestamp update_time = 3;
}

message GoOnlineRequest {
  // The relative resource name of the Driver to go online. Example: "drivers/driver1"
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+$"];

  // The location of the Driver.
  Location location = 2 [(validate.rules).message.required = true];

  string notification_token = 3;
}

message GoOnlineResponse {
  // The current status of the Driver.
  Status status = 1;
}

message GoOfflineRequest {
  // The relative resource name of the Driver to go offline. Example: "drivers/driver1"
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+$"];
}

message GoOfflineResponse {
  // The current status of the Driver.
  Status status = 1;
}

message GetStatusRequest {
  // The relative resource name of the Status. Example: "drivers/driver1/status"
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+/status$"];
}

message GetStatusResponse {
  // The current status of the Driver.
  Status status = 1;
}

message Location {
  // The relative resource name of the Location. Example: "drivers/driver1/location"
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+/location$"];

  // The latitude of the Driver.
  double latitude = 2;

  // The longitude of the Driver.
  double longitude = 3;

  // Output only. Timestamp when the location was last updated.
  google.protobuf.Timestamp timestamp = 4;
}

message GetLocationRequest {
  // The relative resource name of the Location.
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+/location$"];
}

message GetLocationResponse {
  // The location of the Driver.
  Location location = 1;
}

message UpdateLocationRequest {
  // The relative resource name of the Driver.
  string parent = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+$"];

  // The location of the Driver.
  Location location = 2;
}

message UpdateLocationResponse {}

message Vehicle {
  // Relative resource name of Vehicle, for example: "drivers/driver1/vehicle"
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+/vehicle$"];

  // The type of the Vehicle.
  Type type = 2 [(validate.rules).enum = {not_in: [0]}];

  // The make of the Vehicle.
  string display_name = 3;

  // The license plate number of the Vehicle.
  string license_plate = 4;

  // Output only. Timestamp when the Vehicle was created.
  google.protobuf.Timestamp create_time = 9;

  // Output only. Timestamp when the Vehicle was last updated.
  google.protobuf.Timestamp update_time = 10;

  // The type of the Vehicle.
  enum Type {
    // The type of the Vehicle is unknown.
    TYPE_UNSPECIFIED = 0;

    // The Vehicle is an e-rickshaw.
    TYPE_ERICKSHAW = 1;

    // The Vehicle is an auto-rickshaw.
    TYPE_AUTORICKSHAW = 2;

    // The Vehicle is a motorcycle.
    TYPE_MOTORCYCLE = 3;
  }
}

message GetVehicleRequest {
  // The relative resource name of the Vehicle. Example: "drivers/driver1/vehicle"
  string name = 1 [(validate.rules).string.pattern = "^drivers/[A-Za-z0-9_-]+/vehicle$"];
}

message GetVehicleResponse {
  // The requested Vehicle.
  Vehicle vehicle = 1;
}

message UpdateVehicleRequest {
  // The Vehicle resource which replaces the resource on the server.
  Vehicle vehicle = 1 [(validate.rules).message.required = true];

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

message UpdateVehicleResponse {
  // The updated Vehicle resource.
  Vehicle vehicle = 1;
}